// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/disaster37/harbor-cli/harbor/api (interfaces: API,ArtifactAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	harborapi "github.com/disaster37/harbor-cli/harbor/api"
	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Artifact mocks base method.
func (m *MockAPI) Artifact() harborapi.ArtifactAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Artifact")
	ret0, _ := ret[0].(harborapi.ArtifactAPI)
	return ret0
}

// Artifact indicates an expected call of Artifact.
func (mr *MockAPIMockRecorder) Artifact() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Artifact", reflect.TypeOf((*MockAPI)(nil).Artifact))
}

// MockArtifactAPI is a mock of ArtifactAPI interface.
type MockArtifactAPI struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactAPIMockRecorder
}

// MockArtifactAPIMockRecorder is the mock recorder for MockArtifactAPI.
type MockArtifactAPIMockRecorder struct {
	mock *MockArtifactAPI
}

// NewMockArtifactAPI creates a new mock instance.
func NewMockArtifactAPI(ctrl *gomock.Controller) *MockArtifactAPI {
	mock := &MockArtifactAPI{ctrl: ctrl}
	mock.recorder = &MockArtifactAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactAPI) EXPECT() *MockArtifactAPIMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockArtifactAPI) Delete(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArtifactAPIMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArtifactAPI)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockArtifactAPI) Get(arg0, arg1, arg2 string) (*harborapi.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*harborapi.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockArtifactAPIMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArtifactAPI)(nil).Get), arg0, arg1, arg2)
}

// GetVulnerabilities mocks base method.
func (m *MockArtifactAPI) GetVulnerabilities(arg0, arg1, arg2 string) (harborapi.VulnerabilityReportResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilities", arg0, arg1, arg2)
	ret0, _ := ret[0].(harborapi.VulnerabilityReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnerabilities indicates an expected call of GetVulnerabilities.
func (mr *MockArtifactAPIMockRecorder) GetVulnerabilities(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilities", reflect.TypeOf((*MockArtifactAPI)(nil).GetVulnerabilities), arg0, arg1, arg2)
}

// Scan mocks base method.
func (m *MockArtifactAPI) Scan(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockArtifactAPIMockRecorder) Scan(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockArtifactAPI)(nil).Scan), arg0, arg1, arg2)
}
